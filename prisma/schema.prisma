// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumRole {
  ADMIN
  USER
}

enum EnumInvoiceStatus {
  ANALYZED
  ERROR
  PENDING
}

enum EnumTokenType {
  ACCESS
  REFRESH
}

enum EnumInteractionRole {
  USER
  ASSISTANT
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  name     String
  role     EnumRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices   Invoice[]
  userTokens UserTokens[]
}

model UserTokens {
  id        String        @id @default(uuid())
  userId    String
  token     String
  type      EnumTokenType @default(ACCESS)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invoice {
  id              String            @id @default(uuid())
  userId          String
  invoiceNumber   String?
  shipperName     String?
  consigneeName   String?
  invoiceDate     DateTime?
  invoiceAmount   Float?
  invoiceDiscount Float?
  invoiceTax      Float?
  invoiceStatus   EnumInvoiceStatus @default(PENDING)

  invoiceUrl       String?
  fileOriginalName String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  chatHistory  Chat?
  invoiceItems InvoiceItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InvoiceItem {
  id           Int     @id @default(autoincrement())
  invoiceId    String
  itemName     String
  itemQuantity Int
  itemPrice    Float
  itemTotal    Float

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model ChatInteraction {
  id        String              @id @default(uuid())
  chatId    String              
  role      EnumInteractionRole
  content   String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  chat      Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String   @id @default(uuid())
  invoiceId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatInteractions ChatInteraction[]
  invoice          Invoice           @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
